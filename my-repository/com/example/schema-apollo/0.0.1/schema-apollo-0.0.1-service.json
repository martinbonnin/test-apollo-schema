{"commonMetadata":{"schema":{"sdl":"schema {\n  query: Query\n}\n\ndirective @optional (if: Boolean = true) on FIELD|VARIABLE_DEFINITION\n\ndirective @nonnull (fields: String! = \"\") on OBJECT|FIELD\n\ndirective @typePolicy (keyFields: String! = \"\", embeddedFields: String! = \"\") on OBJECT|INTERFACE|UNION\n\ndirective @fieldPolicy (forField: String!, keyArgs: String! = \"\", paginationArgs: String! = \"\") repeatable on OBJECT\n\n\"\"\"\nIndicates that the given field, argument, input field or enum value requires\ngiving explicit consent before being used.\n\"\"\"\ndirective @requiresOptIn (feature: String!) repeatable on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE\n\ndirective @targetName (name: String!) on OBJECT|ENUM_VALUE\n\ndirective @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT\n\ndirective @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT\n\ndirective @deprecated (reason: String = \"No longer supported\") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE\n\ndirective @defer (label: String, if: Boolean! = true) on FRAGMENT_SPREAD|INLINE_FRAGMENT\n\ndirective @specifiedBy (url: String!) on SCALAR\n\ntype Query {\n  foo: Int\n}\n\n\"\"\"\nThe `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\n\"\"\"\nscalar Int\n\n\"\"\"\nThe `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\n\"\"\"\nscalar Float\n\n\"\"\"\nThe `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\n\"\"\"\nscalar String\n\n\"\"\"\nThe `Boolean` scalar type represents `true` or `false`.\n\"\"\"\nscalar Boolean\n\n\"\"\"\nThe `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.\n\"\"\"\nscalar ID\n\ntype __Schema {\n  description: String\n\n  types: [__Type!]!\n\n  queryType: __Type!\n\n  mutationType: __Type\n\n  subscriptionType: __Type\n\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n\n  name: String\n\n  description: String\n\n  fields(includeDeprecated: Boolean = false): [__Field!]\n\n  interfaces: [__Type!]\n\n  possibleTypes: [__Type!]\n\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n  inputFields(includeDeprecated: Boolean = false): [__InputValue!]\n\n  ofType: __Type\n\n  specifiedByURL: String\n}\n\nenum __TypeKind {\n  SCALAR\n\n  OBJECT\n\n  INTERFACE\n\n  UNION\n\n  ENUM\n\n  INPUT_OBJECT\n\n  LIST\n\n  NON_NULL\n}\n\ntype __Field {\n  name: String!\n\n  description: String\n\n  args(includeDeprecated: Boolean = false): [__InputValue!]!\n\n  type: __Type!\n\n  isDeprecated: Boolean!\n\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n\n  description: String\n\n  type: __Type!\n\n  defaultValue: String\n\n  isDeprecated: Boolean!\n\n  deprecationReason: String\n}\n\ntype __EnumValue {\n  name: String!\n\n  description: String\n\n  isDeprecated: Boolean!\n\n  deprecationReason: String\n}\n\ntype __Directive {\n  name: String!\n\n  description: String\n\n  locations: [__DirectiveLocation!]!\n\n  args(includeDeprecated: Boolean = false): [__InputValue!]!\n\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n\n  MUTATION\n\n  SUBSCRIPTION\n\n  FIELD\n\n  FRAGMENT_DEFINITION\n\n  FRAGMENT_SPREAD\n\n  INLINE_FRAGMENT\n\n  VARIABLE_DEFINITION\n\n  SCHEMA\n\n  SCALAR\n\n  OBJECT\n\n  FIELD_DEFINITION\n\n  ARGUMENT_DEFINITION\n\n  INTERFACE\n\n  UNION\n\n  ENUM\n\n  ENUM_VALUE\n\n  INPUT_OBJECT\n\n  INPUT_FIELD_DEFINITION\n}\n","keyFields":{"Query":[],"__Schema":[],"__Type":[],"__Field":[],"__InputValue":[],"__EnumValue":[],"__Directive":[]},"foreignNames":{},"directivesToStrip":["optional","nonnull","typePolicy","fieldPolicy","requiresOptIn","targetName"],"connectionTypes":[]},"schemaPackageName":"com.example.schema","pluginVersion":"3.8.4","codegenModels":"operationBased","scalarMapping":{}},"compilerMetadata":{"fragments":[],"resolverInfo":{"magic":"KotlinCodegen","version":"3.8.4","entries":[{"key":{"kind":"SchemaType","id":"Query"},"className":{"packageName":"com.example.schema.type","simpleNames":["Query"]}},{"key":{"kind":"MapType","id":"Query"},"className":{"packageName":"com.example.schema.type","simpleNames":["QueryMap"]}},{"key":{"kind":"BuilderType","id":"Query"},"className":{"packageName":"com.example.schema.type","simpleNames":["QueryBuilder"]}},{"key":{"kind":"BuilderFun","id":"Query"},"className":{"packageName":"com.example.schema.type","simpleNames":["buildQuery"]}},{"key":{"kind":"SchemaType","id":"String"},"className":{"packageName":"com.example.schema.type","simpleNames":["GraphQLString"]}},{"key":{"kind":"SchemaType","id":"Boolean"},"className":{"packageName":"com.example.schema.type","simpleNames":["GraphQLBoolean"]}},{"key":{"kind":"SchemaType","id":"Int"},"className":{"packageName":"com.example.schema.type","simpleNames":["GraphQLInt"]}},{"key":{"kind":"SchemaType","id":"Float"},"className":{"packageName":"com.example.schema.type","simpleNames":["GraphQLFloat"]}},{"key":{"kind":"SchemaType","id":"ID"},"className":{"packageName":"com.example.schema.type","simpleNames":["GraphQLID"]}}]}},"moduleName":":","generateDataBuilders":false}